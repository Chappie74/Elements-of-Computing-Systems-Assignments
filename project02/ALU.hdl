// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
    // Implementation missing.
    Not(in=zx, out=NotZX);
    Expand16(in=NotZX, out=NotZX16);
    And16(a=NotZX16, b=x, out=NewX);

    Not(in=zy, out=NotZY);
    Expand16(in=NotZY, out=NotZY16);
    And16(a=NotZY16, b=y, out=NewY);

    Not16(in=NewX, out=NewXNegated);
    Expand16(in=nx, out=NX16);
    And16(a=NX16, b=NewXNegated, out=PossibleXNegated);
    Not(in=nx, out=DoNotNegateX);
    Expand16(in=DoNotNegateX, out=DoNotNegateX16);
    And16(a=DoNotNegateX16, b=NewX, out=PossibleXNotNegated);
    Or16(a=PossibleXNegated, b=PossibleXNotNegated, out=PossiblyNegatedNewX);

    Not16(in=NewY, out=NewYNegated);
    Expand16(in=ny, out=NY16);
    And16(a=NY16, b=NewYNegated, out=PossibleYNegated);
    Not(in=ny, out=DoNotNegateY);
    Expand16(in=DoNotNegateY, out=DoNotNegateY16);
    And16(a=DoNotNegateY16, b=NewY, out=PossibleYNotNegated);
    Or16(a=PossibleYNegated, b=PossibleYNotNegated, out=PossiblyNegatedNewY);

    Add16(a=PossiblyNegatedNewX, b=PossiblyNegatedNewY, out=AddOutput);
    And16(a=PossiblyNegatedNewX, b=PossiblyNegatedNewY, out=AndOutput);

    Not(in=f, out=NotF);
    Expand16(in=f, out=F16);
    Expand16(in=NotF, out=NotF16);
    And16(a=F16, b=AddOutput, out=PossibleOutput1);
    And16(a=NotF16, b=AndOutput, out=PossibleOutput2);
    Or16(a=PossibleOutput1, b=PossibleOutput2, out=PreNegatedOutput);

    Not16(in=PreNegatedOutput, out=NegatedOutput);
    Expand16(in=no, out=ToNegate16);
    And16(a=NegatedOutput, b=ToNegate16, out=FinalPossibleOutput1);
    Not(in=no, out=NotNo);
    Expand16(in=NotNo, out=DoNotNegate16);
    And16(a=PreNegatedOutput, b=DoNotNegate16, out=FinalPossibleOutput2);

    Or16(a=FinalPossibleOutput1, b=FinalPossibleOutput2, out=out);
    //Can't use output pin in other places so I have create output twice
    Or16(a=FinalPossibleOutput1, b=FinalPossibleOutput2, out=TestOutput); 
    And16(a=TestOutput, b[15]=true, b[0..14]=false, out[15]=ng); 
    
    Or16Way(in=TestOutput, out=IsNotZero);
    Not(in=IsNotZero, out=zr);
}
