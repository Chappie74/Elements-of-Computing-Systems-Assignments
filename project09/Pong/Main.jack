class Main
{
    function void main()
    {
        var Ball ball;
        var Paddle leftPaddle;
        var Paddle rightPaddle;
        var boolean exit;
        var char key;
        var int direction;
        var int topCircle;
        var int bottomCircle;

        let ball = Ball.new(5, -5);
        let leftPaddle = Paddle.new(10, 128, 10, 50);
        let rightPaddle = Paddle.new(490, 128, 10, 50);
        let exit = false;

        while(~exit)
        {
            let key = Keyboard.keyPressed();
            if(key = 131)
            {
                do leftPaddle.moveUp();
            }
            if(key = 65)
            {
                do rightPaddle.moveUp();
            }
            if(key = 133)
            {
                do leftPaddle.moveDown();
            }
            if(key = 83)
            {
                do rightPaddle.moveDown();
            }

            let topCircle = ball[1] + ball[2]; //y + radius
            let bottomCircle = ball[1] - ball[2]; //y - radius
            //ball[0] x, ball[3] - direction, ball[2] radius
            //paddle[0] x, paddle[2] width
            if((ball[0] + ball[3] - ball[2]) < (leftPaddle[0] + leftPaddle[2])) 
            {
                do ball.switchVelocity();
            }
            //don't need to add width to right paddle because its x point is what will encounter the ball first
            if(((ball[0] + ball[3] + ball[2]) > rightPaddle[0]) & 
                (((topCircle < rightPaddle.getBottomY()) & (topCircle > rightPaddle.getTopY())) | 
                ((bottomCircle > rightPaddle.getTopY()) & (bottomCircle < rightPaddle.getBottomY() ))))

            {
                do ball.switchVelocity();
            }
            do ball.moveOne();
            do Sys.wait(5);
        }
        return;
    }

    /**method boolean inYRange(int topY, int bottomY)
    {

        if(((topCircle < bottomY) & (topCircle > topY)) | ((bottomCircle > topY) & (bottomCircle < bottomY)))
        {
            return true;
        }
        return false;
    }*/
}
